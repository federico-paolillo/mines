/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { Difficulty, DifficultyObject } from '../game/index.js';
// @ts-ignore
import { Movetype, MovetypeObject } from '../matchmaking/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MoveDto}
 */
// @ts-ignore
export function createMoveDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMoveDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NewGameDto}
 */
// @ts-ignore
export function createNewGameDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNewGameDto;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMoveDto(moveDto: Partial<MoveDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "type": n => { moveDto.type = n.getEnumValue<Movetype>(MovetypeObject); },
        "x": n => { moveDto.x = n.getNumberValue(); },
        "y": n => { moveDto.y = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNewGameDto(newGameDto: Partial<NewGameDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "difficulty": n => { newGameDto.difficulty = n.getEnumValue<Difficulty>(DifficultyObject); },
    }
}
export interface MoveDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The type property
     */
    type?: Movetype | null;
    /**
     * The x property
     */
    x?: number | null;
    /**
     * The y property
     */
    y?: number | null;
}
export interface NewGameDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The difficulty property
     */
    difficulty?: Difficulty | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMoveDto(writer: SerializationWriter, moveDto: Partial<MoveDto> | undefined | null = {}) : void {
    if (moveDto) {
        writer.writeEnumValue<Movetype>("type", moveDto.type);
        writer.writeNumberValue("x", moveDto.x);
        writer.writeNumberValue("y", moveDto.y);
        writer.writeAdditionalData(moveDto.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNewGameDto(writer: SerializationWriter, newGameDto: Partial<NewGameDto> | undefined | null = {}) : void {
    if (newGameDto) {
        writer.writeEnumValue<Difficulty>("difficulty", newGameDto.difficulty);
        writer.writeAdditionalData(newGameDto.additionalData);
    }
}
/* tslint:enable */
/* eslint-enable */
