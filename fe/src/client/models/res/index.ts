/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { Cellstate, CellstateObject } from '../board/index.js';
// @ts-ignore
import { Gamestate, GamestateObject } from '../game/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface CellDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The state property
     */
    state?: Cellstate | null;
    /**
     * The x property
     */
    x?: number | null;
    /**
     * The y property
     */
    y?: number | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CellDto}
 */
// @ts-ignore
export function createCellDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCellDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MatchstateDto}
 */
// @ts-ignore
export function createMatchstateDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMatchstateDto;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCellDto(cellDto: Partial<CellDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "state": n => { cellDto.state = n.getEnumValue<Cellstate>(CellstateObject); },
        "x": n => { cellDto.x = n.getNumberValue(); },
        "y": n => { cellDto.y = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMatchstateDto(matchstateDto: Partial<MatchstateDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "cells": n => { matchstateDto.cells = n.getCollectionOfObjectValues<CellDto>(createCellDtoFromDiscriminatorValue); },
        "height": n => { matchstateDto.height = n.getNumberValue(); },
        "id": n => { matchstateDto.id = n.getStringValue(); },
        "lives": n => { matchstateDto.lives = n.getNumberValue(); },
        "state": n => { matchstateDto.state = n.getEnumValue<Gamestate>(GamestateObject); },
        "width": n => { matchstateDto.width = n.getNumberValue(); },
    }
}
export interface MatchstateDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The cells property
     */
    cells?: CellDto[] | null;
    /**
     * The height property
     */
    height?: number | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The lives property
     */
    lives?: number | null;
    /**
     * The state property
     */
    state?: Gamestate | null;
    /**
     * The width property
     */
    width?: number | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCellDto(writer: SerializationWriter, cellDto: Partial<CellDto> | undefined | null = {}) : void {
    if (cellDto) {
        writer.writeEnumValue<Cellstate>("state", cellDto.state);
        writer.writeNumberValue("x", cellDto.x);
        writer.writeNumberValue("y", cellDto.y);
        writer.writeAdditionalData(cellDto.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMatchstateDto(writer: SerializationWriter, matchstateDto: Partial<MatchstateDto> | undefined | null = {}) : void {
    if (matchstateDto) {
        writer.writeCollectionOfObjectValues<CellDto>("cells", matchstateDto.cells, serializeCellDto);
        writer.writeNumberValue("height", matchstateDto.height);
        writer.writeStringValue("id", matchstateDto.id);
        writer.writeNumberValue("lives", matchstateDto.lives);
        writer.writeEnumValue<Gamestate>("state", matchstateDto.state);
        writer.writeNumberValue("width", matchstateDto.width);
        writer.writeAdditionalData(matchstateDto.additionalData);
    }
}
/* tslint:enable */
/* eslint-enable */
